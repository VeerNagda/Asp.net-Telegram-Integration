{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"scriptContainer\"];\nconst TELEGRAM_WIDGET_VERSION = 14;\nconst randomSeed = parseInt(`${Math.random() * 1e7}`);\nexport class AngularTelegramLoginWidgetComponent {\n  constructor(ngZone, document) {\n    this.ngZone = ngZone;\n    this.login = new EventEmitter();\n    this.load = new EventEmitter();\n    this.loadError = new EventEmitter();\n    this.config = {};\n    this.defaultConfigs = {\n      src: `https://telegram.org/js/telegram-widget.js?${TELEGRAM_WIDGET_VERSION}`,\n      'data-onauth': `onTelegramLogin${randomSeed}(user)`,\n      'onerror': `onTelegramWidgetLoadFail${randomSeed}()`,\n      'onload': `onTelegramWidgetLoad${randomSeed}()`\n    };\n    this.window = window;\n    this.document = document;\n  }\n  ngAfterViewInit() {\n    const scriptAttrs = this.compileConfigs();\n    const script = this.document.createElement('script');\n    for (let key in scriptAttrs) {\n      if (scriptAttrs.hasOwnProperty(key)) {\n        script.setAttribute(key, scriptAttrs[key]);\n      }\n    }\n    this.window['onTelegramLogin' + randomSeed] = data => this.ngZone.run(() => this.login.emit(data));\n    this.window['onTelegramWidgetLoad' + randomSeed] = () => this.ngZone.run(() => this.load.emit());\n    this.window['onTelegramWidgetLoadFail' + randomSeed] = () => this.ngZone.run(() => this.loadError.emit());\n    this.scriptContainer.nativeElement.innerHTML = '';\n    this.scriptContainer.nativeElement.appendChild(script);\n  }\n  compileConfigs() {\n    const configs = this.defaultConfigs ?? {};\n    if (!this.botName) {\n      throw new Error('Telegram widget: bot name not present!');\n    }\n    configs['data-telegram-login'] = this.botName;\n    if (this.config?.accessToWriteMessages) {\n      configs['data-request-access'] = 'write';\n    }\n    if (this.config?.cornerRadius) {\n      configs['data-radius'] = `${this.config.cornerRadius}`;\n    }\n    if (this.config?.showUserPhoto === false) {\n      configs['data-userpic'] = 'false';\n    }\n    if (this.config?.buttonStyle) {\n      configs['data-size'] = this.config.buttonStyle;\n    } else {\n      configs['data-size'] = 'large';\n    }\n    return configs;\n  }\n}\nAngularTelegramLoginWidgetComponent.ɵfac = function AngularTelegramLoginWidgetComponent_Factory(t) {\n  return new (t || AngularTelegramLoginWidgetComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(DOCUMENT));\n};\nAngularTelegramLoginWidgetComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AngularTelegramLoginWidgetComponent,\n  selectors: [[\"angular-telegram-login-widget\"]],\n  viewQuery: function AngularTelegramLoginWidgetComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scriptContainer = _t.first);\n    }\n  },\n  inputs: {\n    botName: \"botName\",\n    config: \"config\"\n  },\n  outputs: {\n    login: \"login\",\n    load: \"load\",\n    loadError: \"loadError\"\n  },\n  decls: 2,\n  vars: 0,\n  consts: [[\"scriptContainer\", \"\"]],\n  template: function AngularTelegramLoginWidgetComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","DOCUMENT","TELEGRAM_WIDGET_VERSION","randomSeed","parseInt","Math","random","AngularTelegramLoginWidgetComponent","constructor","ngZone","document","src","window","ngAfterViewInit","scriptAttrs","compileConfigs","script","createElement","key","hasOwnProperty","setAttribute","data","run","login","emit","load","loadError","scriptContainer","nativeElement","innerHTML","appendChild","configs","defaultConfigs","botName","Error","config","accessToWriteMessages","cornerRadius","showUserPhoto","buttonStyle","selectors","viewQuery","i0"],"sourceRoot":"","sources":["D:\\ASP\\Telegram Integration\\Telegram Integration\\ClientApp\\src\\app\\telegram-login\\telegram-login.component.ts"],"sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {User, WidgetConfiguration} from './types';\n\nconst TELEGRAM_WIDGET_VERSION = 14;\nconst randomSeed = parseInt(`${Math.random() * 1e7}`);\n\n@Component({\n  selector: 'angular-telegram-login-widget',\n  template: `<div #scriptContainer></div>`\n})\nexport class AngularTelegramLoginWidgetComponent implements AfterViewInit {\n\n  @ViewChild('scriptContainer', {static: true}) scriptContainer: ElementRef;\n\n  @Output() login: EventEmitter<User> = new EventEmitter<User>();\n  @Output() load: EventEmitter<void> = new EventEmitter<void>();\n  @Output() loadError: EventEmitter<void> = new EventEmitter<void>();\n\n  @Input() botName: string;\n  @Input() config?: WidgetConfiguration = {};\n\n  private readonly window: Window;\n  private readonly document: Document;\n\n  private defaultConfigs = {\n    src: `https://telegram.org/js/telegram-widget.js?${TELEGRAM_WIDGET_VERSION}`,\n    'data-onauth': `onTelegramLogin${randomSeed}(user)`,\n    'onerror': `onTelegramWidgetLoadFail${randomSeed}()`,\n    'onload': `onTelegramWidgetLoad${randomSeed}()`\n  };\n\n  constructor(\n    private ngZone: NgZone,\n    @Inject(DOCUMENT) document: any\n  ) {\n    this.window = window;\n    this.document = document as Document\n  }\n\n  ngAfterViewInit() {\n    const scriptAttrs = this.compileConfigs();\n    const script = this.document.createElement('script');\n\n    for (let key in scriptAttrs) {\n      if (scriptAttrs.hasOwnProperty(key)) {\n        script.setAttribute(key, scriptAttrs[key]);\n      }\n    }\n\n    this.window['onTelegramLogin' + randomSeed] = data => this.ngZone.run(() => this.login.emit(data));\n    this.window['onTelegramWidgetLoad' + randomSeed] = () => this.ngZone.run(() => this.load.emit());\n    this.window['onTelegramWidgetLoadFail' + randomSeed] = () => this.ngZone.run(() => this.loadError.emit());\n\n    this.scriptContainer.nativeElement.innerHTML = '';\n    this.scriptContainer.nativeElement.appendChild(script);\n  }\n\n  private compileConfigs(): object {\n    const configs = this.defaultConfigs ?? {};\n\n    if (!this.botName) {\n      throw new Error('Telegram widget: bot name not present!');\n    }\n\n    configs['data-telegram-login'] = this.botName\n\n    if (this.config?.accessToWriteMessages) {\n      configs['data-request-access'] = 'write';\n    }\n\n    if (this.config?.cornerRadius) {\n      configs['data-radius'] = `${this.config.cornerRadius}`;\n    }\n\n    if (this.config?.showUserPhoto === false) {\n      configs['data-userpic'] = 'false';\n    }\n\n    if (this.config?.buttonStyle) {\n      configs['data-size'] = this.config.buttonStyle;\n    } else {\n      configs['data-size'] = 'large';\n    }\n\n    return configs;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}